{"version":3,"names":["NativeModules","ThermalPrinterModule","defaultConfig","macAddress","ip","port","payload","autoCut","openCashbox","mmFeedPaper","printerDpi","printerWidthMM","printerNbrCharactersPerLine","timeout","charset","encodingId","getConfig","args","Object","assign","printTcp","printBluetooth","getBluetoothDeviceList","getPrinterWidthMM","getPrinterDpi"],"sources":["index.tsx"],"sourcesContent":["import { NativeModules } from 'react-native';\n\ntype BluetoothPrinter = {\n  deviceName: string;\n  macAddress: string;\n  charset: string;\n  encodingId: number;\n};\n\ntype NativeModuleType = typeof NativeModules & {\n  ThermalPrinterModule: {\n    printTcp(\n      ip: string,\n      port: number,\n      payload: string,\n      autoCut: boolean,\n      openCashbox: boolean,\n      mmFeedPaper: number,\n      printerDpi: number,\n      printerWidthMM: number,\n      printerNbrCharactersPerLine: number,\n      timeout: number,\n      charset: string,\n      encodingId: number\n    ): Promise<void>;\n    printBluetooth(\n      macAddress: string,\n      payload: string,\n      autoCut: boolean,\n      openCashbox: boolean,\n      mmFeedPaper: number,\n      printerDpi: number,\n      printerWidthMM: number,\n      printerNbrCharactersPerLine: number,\n      charset: string,\n      encodingId: number\n    ): Promise<void>;\n    getBluetoothDeviceList(): Promise<BluetoothPrinter[]>;\n    getPrinterWidthMM(\n      macAddress: string,\n      printerDpi: number,\n      printerWidthMM: number,\n      printerNbrCharactersPerLine: number,\n      charset: string,\n      encodingId: number\n    ): Promise<number>;\n    getPrinterDpi(\n      macAddress: string,\n      printerDpi: number,\n      printerWidthMM: number,\n      printerNbrCharactersPerLine: number,\n      charset: string,\n      encodingId: number\n    ): Promise<number>;\n  };\n};\n\nconst { ThermalPrinterModule }: NativeModuleType =\n  NativeModules as NativeModuleType;\n\ninterface PrinterInterface {\n  payload: string;\n  autoCut: boolean;\n  openCashbox: boolean;\n  mmFeedPaper: number;\n  printerDpi: number;\n  printerWidthMM: number;\n  printerNbrCharactersPerLine: number;\n  charset: string;\n  encodingId: number;\n}\n\ninterface PrintTcpInterface extends PrinterInterface {\n  ip: string;\n  port: number;\n  timeout: number;\n  charset: string;\n  encodingId: number;\n}\n\ninterface PrintBluetoothInterface extends PrinterInterface {\n  macAddress: string;\n  charset: string;\n  encodingId: number;\n}\n\nlet defaultConfig: PrintTcpInterface & PrintBluetoothInterface = {\n  macAddress: '',\n  ip: '192.168.192.168',\n  port: 9100,\n  payload: '',\n  autoCut: true,\n  openCashbox: false,\n  mmFeedPaper: 20,\n  printerDpi: 203,\n  printerWidthMM: 48,\n  printerNbrCharactersPerLine: 42,\n  timeout: 30000,\n  charset: 'CP437',\n  encodingId: 0,\n};\n\nconst getConfig = (\n  args: Partial<typeof defaultConfig>\n): typeof defaultConfig => {\n  return Object.assign({}, defaultConfig, args);\n};\n\nconst printTcp = async (\n  args: Partial<PrintTcpInterface> & Pick<PrinterInterface, 'payload'>\n): Promise<void> => {\n  const {\n    ip,\n    port,\n    payload,\n    autoCut,\n    openCashbox,\n    mmFeedPaper,\n    printerDpi,\n    printerWidthMM,\n    printerNbrCharactersPerLine,\n    timeout,\n    charset,\n    encodingId,\n  } = getConfig(args);\n\n  await ThermalPrinterModule.printTcp(\n    ip,\n    port,\n    payload,\n    autoCut,\n    openCashbox,\n    mmFeedPaper,\n    printerDpi,\n    printerWidthMM,\n    printerNbrCharactersPerLine,\n    timeout,\n    charset,\n    encodingId\n  );\n};\n\nconst printBluetooth = (\n  args: Partial<PrintBluetoothInterface> & Pick<PrinterInterface, 'payload'>\n): Promise<void> => {\n  const {\n    macAddress,\n    payload,\n    autoCut,\n    openCashbox,\n    mmFeedPaper,\n    printerDpi,\n    printerWidthMM,\n    printerNbrCharactersPerLine,\n    charset,\n    encodingId,\n  } = getConfig(args);\n\n  return ThermalPrinterModule.printBluetooth(\n    macAddress,\n    payload,\n    autoCut,\n    openCashbox,\n    mmFeedPaper,\n    printerDpi,\n    printerWidthMM,\n    printerNbrCharactersPerLine,\n    charset,\n    encodingId\n  );\n};\n\nconst getBluetoothDeviceList = (): Promise<BluetoothPrinter[]> => {\n  return ThermalPrinterModule.getBluetoothDeviceList();\n};\n\nconst getPrinterWidthMM = (\n  args: Partial<PrintBluetoothInterface> &\n    Pick<PrintBluetoothInterface, 'macAddress'>\n): Promise<number> => {\n  const {\n    macAddress,\n    printerDpi,\n    printerWidthMM,\n    printerNbrCharactersPerLine,\n    charset,\n    encodingId,\n  } = getConfig(args);\n\n  return ThermalPrinterModule.getPrinterWidthMM(\n    macAddress,\n    printerDpi,\n    printerWidthMM,\n    printerNbrCharactersPerLine,\n    charset,\n    encodingId\n  );\n};\n\nconst getPrinterDpi = (\n  args: Partial<PrintBluetoothInterface> &\n    Pick<PrintBluetoothInterface, 'macAddress'>\n): Promise<number> => {\n  const {\n    macAddress,\n    printerDpi,\n    printerWidthMM,\n    printerNbrCharactersPerLine,\n    charset,\n    encodingId,\n  } = getConfig(args);\n\n  return ThermalPrinterModule.getPrinterDpi(\n    macAddress,\n    printerDpi,\n    printerWidthMM,\n    printerNbrCharactersPerLine,\n    charset,\n    encodingId\n  );\n};\n\nexport default {\n  printTcp,\n  printBluetooth,\n  defaultConfig,\n  getBluetoothDeviceList,\n  getPrinterWidthMM,\n  getPrinterDpi,\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAyD5C,MAAM;EAAEC;AAAuC,CAAC,GAC9CD,aAAiC;AA4BnC,IAAIE,aAA0D,GAAG;EAC/DC,UAAU,EAAE,EAAE;EACdC,EAAE,EAAE,iBAAiB;EACrBC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,EAAE;EACXC,OAAO,EAAE,IAAI;EACbC,WAAW,EAAE,KAAK;EAClBC,WAAW,EAAE,EAAE;EACfC,UAAU,EAAE,GAAG;EACfC,cAAc,EAAE,EAAE;EAClBC,2BAA2B,EAAE,EAAE;EAC/BC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE,OAAO;EAChBC,UAAU,EAAE;AACd,CAAC;AAED,MAAMC,SAAS,GACbC,IAAmC,IACV;EACzB,OAAOC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjB,aAAa,EAAEe,IAAI,CAAC;AAC/C,CAAC;AAED,MAAMG,QAAQ,GAAG,MACfH,IAAoE,IAClD;EAClB,MAAM;IACJb,EAAE;IACFC,IAAI;IACJC,OAAO;IACPC,OAAO;IACPC,WAAW;IACXC,WAAW;IACXC,UAAU;IACVC,cAAc;IACdC,2BAA2B;IAC3BC,OAAO;IACPC,OAAO;IACPC;EACF,CAAC,GAAGC,SAAS,CAACC,IAAI,CAAC;EAEnB,MAAMhB,oBAAoB,CAACmB,QAAQ,CACjChB,EAAE,EACFC,IAAI,EACJC,OAAO,EACPC,OAAO,EACPC,WAAW,EACXC,WAAW,EACXC,UAAU,EACVC,cAAc,EACdC,2BAA2B,EAC3BC,OAAO,EACPC,OAAO,EACPC,UACF,CAAC;AACH,CAAC;AAED,MAAMM,cAAc,GAClBJ,IAA0E,IACxD;EAClB,MAAM;IACJd,UAAU;IACVG,OAAO;IACPC,OAAO;IACPC,WAAW;IACXC,WAAW;IACXC,UAAU;IACVC,cAAc;IACdC,2BAA2B;IAC3BE,OAAO;IACPC;EACF,CAAC,GAAGC,SAAS,CAACC,IAAI,CAAC;EAEnB,OAAOhB,oBAAoB,CAACoB,cAAc,CACxClB,UAAU,EACVG,OAAO,EACPC,OAAO,EACPC,WAAW,EACXC,WAAW,EACXC,UAAU,EACVC,cAAc,EACdC,2BAA2B,EAC3BE,OAAO,EACPC,UACF,CAAC;AACH,CAAC;AAED,MAAMO,sBAAsB,GAAGA,CAAA,KAAmC;EAChE,OAAOrB,oBAAoB,CAACqB,sBAAsB,CAAC,CAAC;AACtD,CAAC;AAED,MAAMC,iBAAiB,GACrBN,IAC6C,IACzB;EACpB,MAAM;IACJd,UAAU;IACVO,UAAU;IACVC,cAAc;IACdC,2BAA2B;IAC3BE,OAAO;IACPC;EACF,CAAC,GAAGC,SAAS,CAACC,IAAI,CAAC;EAEnB,OAAOhB,oBAAoB,CAACsB,iBAAiB,CAC3CpB,UAAU,EACVO,UAAU,EACVC,cAAc,EACdC,2BAA2B,EAC3BE,OAAO,EACPC,UACF,CAAC;AACH,CAAC;AAED,MAAMS,aAAa,GACjBP,IAC6C,IACzB;EACpB,MAAM;IACJd,UAAU;IACVO,UAAU;IACVC,cAAc;IACdC,2BAA2B;IAC3BE,OAAO;IACPC;EACF,CAAC,GAAGC,SAAS,CAACC,IAAI,CAAC;EAEnB,OAAOhB,oBAAoB,CAACuB,aAAa,CACvCrB,UAAU,EACVO,UAAU,EACVC,cAAc,EACdC,2BAA2B,EAC3BE,OAAO,EACPC,UACF,CAAC;AACH,CAAC;AAED,eAAe;EACbK,QAAQ;EACRC,cAAc;EACdnB,aAAa;EACboB,sBAAsB;EACtBC,iBAAiB;EACjBC;AACF,CAAC","ignoreList":[]}